/**
 * shotstack
 * The Shotstack API is a video editing service that allows for the programatic creation of videos using JSON. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Asset', 'model/Transition'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Asset'), require('./Transition'));
  } else {
    // Browser globals (root is window)
    if (!root.ShotstackSdk) {
      root.ShotstackSdk = {};
    }
    root.ShotstackSdk.Clip = factory(root.ShotstackSdk.ApiClient, root.ShotstackSdk.Asset, root.ShotstackSdk.Transition);
  }
}(this, function(ApiClient, Asset, Transition) {
  'use strict';



  /**
   * The Clip model module.
   * @module model/Clip
   * @version v1
   */

  /**
   * Constructs a new <code>Clip</code>.
   * A clip is a container for a specific type of asset, i.e. a title, photo or video. You use a Clip to define when an asset will display on the timeline, how long it will play for and transitions and effects to apply to it. 
   * @alias module:model/Clip
   * @class
   * @param asset {module:model/Asset} The type of asset to display for the duration of this Clip. Value must be one of <b>TitleAsset</b>, <b>ImageAsset</b> or <b>VideoAsset</b>. 
   * @param start {Number} The start position of the Clip on the timeline, in seconds.
   * @param length {Number} The length, in seconds, the Clip should play for.
   */
  var exports = function(asset, start, length) {
    var _this = this;

    _this['asset'] = asset;
    _this['start'] = start;
    _this['length'] = length;
  };

  /**
   * Constructs a <code>Clip</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Clip} obj Optional instance to populate.
   * @return {module:model/Clip} The populated <code>Clip</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('asset')) {
        obj['asset'] = ApiClient.convertToType(data['asset'], Asset);
      }
      if (data.hasOwnProperty('start')) {
        obj['start'] = ApiClient.convertToType(data['start'], 'Number');
      }
      if (data.hasOwnProperty('length')) {
        obj['length'] = ApiClient.convertToType(data['length'], 'Number');
      }
      if (data.hasOwnProperty('transition')) {
        obj['transition'] = Transition.constructFromObject(data['transition']);
      }
      if (data.hasOwnProperty('effect')) {
        obj['effect'] = ApiClient.convertToType(data['effect'], 'String');
      }
      if (data.hasOwnProperty('filter')) {
        obj['filter'] = ApiClient.convertToType(data['filter'], 'String');
      }
    }
    return obj;
  }

  /**
   * The type of asset to display for the duration of this Clip. Value must be one of <b>TitleAsset</b>, <b>ImageAsset</b> or <b>VideoAsset</b>. 
   * @member {module:model/Asset} asset
   */
  exports.prototype['asset'] = undefined;
  /**
   * The start position of the Clip on the timeline, in seconds.
   * @member {Number} start
   */
  exports.prototype['start'] = undefined;
  /**
   * The length, in seconds, the Clip should play for.
   * @member {Number} length
   */
  exports.prototype['length'] = undefined;
  /**
   * @member {module:model/Transition} transition
   */
  exports.prototype['transition'] = undefined;
  /**
   * A motion effect to apply to the Clip.
   * @member {module:model/Clip.EffectEnum} effect
   */
  exports.prototype['effect'] = undefined;
  /**
   * A filter effect to apply to the Clip.
   * @member {module:model/Clip.FilterEnum} filter
   */
  exports.prototype['filter'] = undefined;


  /**
   * Returns The type of asset to display for the duration of this Clip. Value must be one of <b>TitleAsset</b>, <b>ImageAsset</b> or <b>VideoAsset</b>. 
   * @return {module:model/Asset}
   */
  exports.prototype.getAsset = function() {
    return this['asset'];
  }

  /**
   * Sets The type of asset to display for the duration of this Clip. Value must be one of <b>TitleAsset</b>, <b>ImageAsset</b> or <b>VideoAsset</b>. 
   * @param {module:model/Asset} asset The type of asset to display for the duration of this Clip. Value must be one of <b>TitleAsset</b>, <b>ImageAsset</b> or <b>VideoAsset</b>. 
   */
  exports.prototype.setAsset = function(asset) {
    this['asset'] = asset;
  }


  /**
   * Returns The start position of the Clip on the timeline, in seconds.
   * @return {Number}
   */
  exports.prototype.getStart = function() {
    return this['start'];
  }

  /**
   * Sets The start position of the Clip on the timeline, in seconds.
   * @param {Number} start The start position of the Clip on the timeline, in seconds.
   */
  exports.prototype.setStart = function(start) {
    this['start'] = start;
  }


  /**
   * Returns The length, in seconds, the Clip should play for.
   * @return {Number}
   */
  exports.prototype.getLength = function() {
    return this['length'];
  }

  /**
   * Sets The length, in seconds, the Clip should play for.
   * @param {Number} length The length, in seconds, the Clip should play for.
   */
  exports.prototype.setLength = function(length) {
    this['length'] = length;
  }


  /**
   * @return {module:model/Transition}
   */
  exports.prototype.getTransition = function() {
    return this['transition'];
  }

  /**
   * @param {module:model/Transition} transition
   */
  exports.prototype.setTransition = function(transition) {
    this['transition'] = transition;
  }


  /**
   * Returns A motion effect to apply to the Clip.
   * @return {module:model/Clip.EffectEnum}
   */
  exports.prototype.getEffect = function() {
    return this['effect'];
  }

  /**
   * Sets A motion effect to apply to the Clip.
   * @param {module:model/Clip.EffectEnum} effect A motion effect to apply to the Clip.
   */
  exports.prototype.setEffect = function(effect) {
    this['effect'] = effect;
  }


  /**
   * Returns A filter effect to apply to the Clip.
   * @return {module:model/Clip.FilterEnum}
   */
  exports.prototype.getFilter = function() {
    return this['filter'];
  }

  /**
   * Sets A filter effect to apply to the Clip.
   * @param {module:model/Clip.FilterEnum} filter A filter effect to apply to the Clip.
   */
  exports.prototype.setFilter = function(filter) {
    this['filter'] = filter;
  }


  /**
   * Allowed values for the <code>effect</code> property.
   * @enum {String}
   * @readonly
   */
  exports.EffectEnum = {
    /**
     * value: "zoomIn"
     * @const
     */
    "zoomIn": "zoomIn",
    /**
     * value: "zoomOut"
     * @const
     */
    "zoomOut": "zoomOut",
    /**
     * value: "slideLeft"
     * @const
     */
    "slideLeft": "slideLeft",
    /**
     * value: "slideRight"
     * @const
     */
    "slideRight": "slideRight",
    /**
     * value: "slideUp"
     * @const
     */
    "slideUp": "slideUp",
    /**
     * value: "slideDown"
     * @const
     */
    "slideDown": "slideDown"  };

  /**
   * Allowed values for the <code>filter</code> property.
   * @enum {String}
   * @readonly
   */
  exports.FilterEnum = {
    /**
     * value: "boost"
     * @const
     */
    "boost": "boost",
    /**
     * value: "contrast"
     * @const
     */
    "contrast": "contrast",
    /**
     * value: "darken"
     * @const
     */
    "darken": "darken",
    /**
     * value: "greyscale"
     * @const
     */
    "greyscale": "greyscale",
    /**
     * value: "lighten"
     * @const
     */
    "lighten": "lighten",
    /**
     * value: "muted"
     * @const
     */
    "muted": "muted",
    /**
     * value: "negative"
     * @const
     */
    "negative": "negative"  };


  return exports;
}));


